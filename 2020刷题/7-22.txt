237. 删除链表中的节点
请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。

现有一个链表 --?head =?[4,5,1,9]，它可以表示为:


示例 1:
输入: head = [4,5,1,9], node = 5

输出: [4,1,9]

解释: 给定你链表中值为?5?的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9.


对于非尾结点，将下个结点的内容复制到本结点，在删除掉下一个结点即可（O（1）），
        但是对尾结点，则只能从链表头结点开始遍历到尾结点的前一个结点(O(n))
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void deleteNode(ListNode* node) {
	 ListNode* pnext = node->next;
         node->val = node->next->val;
         node->next = node->next->next;
	 delete pnext;
    }
};

19. 删除链表的倒数第N个节点
给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。
示例：
给定一个链表: 1->2->3->4->5, 和 n = 2.
当删除了倒数第二个节点后，链表变为 1->2->3->5.
说明：
给定的 n 保证是有效的。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int i = 1;
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast->next)
        {
            if(i > n)
                slow = slow->next;
            fast = fast->next;
            i++;
        }
        if(i == n)
            return head->next;
        slow->next = slow->next->next;
        return head;
    }
};