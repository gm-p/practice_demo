33. 搜索旋转排序数组
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组?[0,1,2,4,5,6,7]?可能变为?[4,5,6,7,0,1,2]?)。


搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回?-1?。


你可以假设数组中不存在重复的元素。

你的算法时间复杂度必须是?O(log?n) 级别。
class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.empty())
            return -1;
        int n = nums.size();
        int left = 0, right = n - 1;
        int rotate = 0;
        while(nums[left] > nums[right])
        {
            int mid = (left + right) / 2;
            if(nums[mid] > nums[right])
                left = mid;
            else
                right = mid;
            if(right - left == 1)
            {
                rotate = right;
                break;
            }
        }
        left = 0, right = n - 1;
        while(left <= right)
        {
            int mid = (left + right) / 2;
            int realmid = (mid + rotate) % n;
            if(nums[realmid] == target)
                return realmid;
            else if(nums[realmid] < target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        return -1;
    }
};

81. 搜索旋转排序数组 II
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组?[0,0,1,2,2,5,6]?可能变为?[2,5,6,0,0,1,2]?)。


编写一个函数来判断给定的目标值是否存在于数组中。若存在返回?true，否则返回?false。


class Solution {
public:
    bool search(vector<int>& nums, int target) {
        if(nums.empty())
            return false;
        int left = 0, right = nums.size() - 1;
        while(left <= right)
        {
            int mid = (left + right) / 2;
            if(nums[mid] == target)
                return true;
            else if(nums[mid] < nums[right])
            {
                if(nums[mid] < target && nums[right] >= target)
                    left = mid + 1;
                else
                    right = mid - 1;
            }
            else if(nums[mid] > nums[right])
            {
                if(nums[mid] > target && nums[left] <= target)
                    right = mid -1;
                else
                    left = mid + 1;
            }
            else   //若中间数等于最右边数，移动right指针
                right--;
                
        }
        return false;
    }
};

153. 寻找旋转排序数组中的最小值
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组?[0,1,2,4,5,6,7] 可能变为?[4,5,6,7,0,1,2]?)。


请找出其中最小的元素。

你可以假设数组中不存在重复元素。


class Solution {
public:
    int findMin(vector<int>& nums) {
        int n = nums.size();
        int left = 0, right = n - 1;
        int res = nums[0];
        while(nums[left] > nums[right])
        {
            int mid = (left + right) / 2;
            if(nums[mid] > nums[right])
                left = mid;
            else
                right = mid;
            if(right - left == 1)
            {
                res = nums[right];
                break;
            }  
        }
        return res;
    }
};

154. 寻找旋转排序数组中的最小值 II
假设按照升序排序的数组在预先未知的某个点上进行了旋转。


( 例如，数组?[0,1,2,4,5,6,7] 可能变为?[4,5,6,7,0,1,2]?)。

请找出其中最小的元素。


注意数组中可能存在重复的元素。
class Solution {
public:
    int findMin(vector<int>& nums) {
        int n = nums.size();
        if(nums[0] < nums[n-1])
            return nums[0];
        else
        {
            int left = 0, right = n-1;
            while(left <= right)
            {
                int mid = (left + right) / 2;
                if(nums[mid] > nums[right])
                    left = mid + 1;
                else if(nums[mid] < nums[right])
                    right = mid;
                else
                    right--;
            }
            return nums[left];
        }
    }
};