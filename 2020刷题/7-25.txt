2.两数相加
给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照逆序的方式存储的，并且它们的每个节点只能存储一位数字。


如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0?开头。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1 == NULL)
            return l2;
        if(l2 == NULL)
            return l1;
        ListNode* preHead = new ListNode(0);
        ListNode* p = preHead;
        int cur = 0;
        int sum = 0;
        while(l1 && l2)
        {
            sum = cur + l1->val + l2->val;
            cur = sum / 10;
            sum = sum % 10;
            p->next = new ListNode(sum);
            p = p->next;
            l1 = l1->next;
            l2 = l2->next;
        }
        while(l1)
        {
            sum = cur + l1->val;
            cur = sum / 10;
            sum = sum % 10;
            p->next = new ListNode(sum);
            p = p->next;
            l1 = l1->next;
        }
        while(l2)
        {
            sum = cur + l2->val;
            cur = sum / 10;
            sum = sum % 10;
            p->next = new ListNode(sum);
            p = p->next;
            l2 = l2->next;
        }
        if(cur)
            p->next = new ListNode(cur);
        return preHead->next;
    }
};

328. 奇偶链表
给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。
请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。
说明:
    应当保持奇数节点和偶数节点的相对顺序。
    链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head == NULL || head->next == NULL)
            return head;
        ListNode* odd = head;
        ListNode* even = head->next;
        ListNode* evenHead = even;
        ListNode* p = even->next;
        int cnt = 1;
        while(p)
        {
            if(cnt % 2)
            {
                odd->next = p;
                p = p->next;
                odd = odd->next;
            }
            else
            {
                even->next = p;
                p = p->next;
                even = even->next;
            }
            cnt++;
        }
        odd->next = evenHead;
        even->next = NULL;
        return head;
    }
};

234. 回文链表
请判断一个链表是否为回文链表。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL || head->next == NULL)
            return true;
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast && fast->next)
        {
            if(fast->next->next == NULL)
                break;
            slow = slow->next;
            fast = fast->next->next;
        }
        ListNode* right = slow;
        bool flag = false;
        if(fast)
        {
            right = slow->next;
            flag = true;
        }
        fast = right->next;
        right->next = NULL;
        ListNode* pn = NULL;
        ListNode* pre = right;
        while(fast)
        {
            pn = fast->next;
            fast->next = pre;
            pre = fast;
            fast = pn;
        }
        slow = head;
        fast = pre;
        while(fast)
        {
            if(slow->val != fast->val)
                return false;
            slow = slow->next;
            fast = fast->next;
        }
        fast = pre->next;
        pre->next = NULL;
        while(fast)
        {
            pn = fast->next;
            fast->next = pre;
            pre = fast;
            fast = pn;
        }
        return true;
    }
};