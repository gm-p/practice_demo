3. 无重复字符的最长子串
给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度
示例 1:
输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:
输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是?"wke"，所以其长度为 3。
?    
请注意，你的答案必须是 子串 的长度，"pwke"?是一个子序列，不是子串。


class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n = s.size();
        unordered_set<char> us;
        int left = 0, right = 0;
        int maxLength = 0;
        while(right < n)
        {
            if(us.find(s[right]) == us.end())
            {
                us.insert(s[right]);
                right++;
                maxLength = max(maxLength, right-left);
            }
            else
            {
                us.erase(s[left]);
                left++;
            }
        }
        return maxLength;
    }
};

38. 报数
报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：
1.     1
2.     11
3.     21
4.     1211
5.     111221
1?被读作??"one 1"??("一个一") , 即?11。

11 被读作?"two 1s"?("两个一"）, 即?21。

21 被读作?"one 2", ?"one 1"?（"一个二"?,??"一个一")?, 即?1211。


给定一个正整数 n（1 ≤?n?≤ 30），输出报数序列的第 n 项。

注意：整数顺序将表示为一个字符串。
示例 1:
输入: 1
输出: "1"
示例 2:
输入: 4
输出: "1211"
class Solution {
public:
    string countAndSay(int n) {
        if(n <= 0)
            return "";
        string pre = "1";
        while(--n)
        {
            string curS = "";
            for(int i=0; i<pre.size(); i++)
            {
                int cnt = 1;
                while(i+1 < pre.size() && pre[i] == pre[i+1])
                {
                    cnt++;
                    i++;
                }
                curS += to_string(cnt) + pre[i];
            }
            pre = curS;
        }
        return pre;
    }
};