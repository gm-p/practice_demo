1.给定一个整数数组 nums?和一个目标值 target，请你在该数组中找出和为目标值的那?两个?整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> res;
        for(int i=0; i<nums.size()-1; i++)
        {
            for(int j=i+1; j<nums.size(); j++)
            {
                if(nums[i] + nums[j] == target)
                {
                    res.emplace_back(i);
                    res.emplace_back(j);
                    break;
                }
            }
        }
        return res;
    }
};

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> res;
        int n = nums.size();
        if(n < 2)
            return res;
        unordered_map<int, int> m;
        for(int i=0; i<n; i++)
        {
            int tmp = target - nums[i];
            if(m.find(tmp) != m.end())
            {
                res.emplace_back(m[tmp]);
                res.emplace_back(i);
                break;
            }
            else
            {
                m[nums[i]] = i;
            }
        }
        return res;
    }
};

167.给定一个已按照升序排列?的有序数组，找到两个数使得它们相加之和等于目标数。

函数应该返回这两个下标值 index1 和 index2，其中 index1?必须小于?index2。


class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> res;
        int left = 0, right = numbers.size() - 1;
        while(left < right)
        {
            int sum = numbers[left] + numbers[right];
            if(sum < target)
                left++;
            else if(sum > target)
                right--;
            else
            {
                res.emplace_back(left+1);
                res.emplace_back(right+1);
                break;
            }
        }
        return res;
    }
};

653.两数之和IV - 输入BST
给定一个二叉搜索树和一个目标结果，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        vector<int> data;
        inOrder(root, data);
        int n = data.size();
        if(n < 2)
            return false; 
        int left = 0, right = n-1;
        while(left < right)
        {
            int sum = data[left] + data[right];
            if(sum == k)
                return true;
            else if(sum < k)
                left++;
            else
                right--;
        }
        return false;
    }
    void inOrder(TreeNode* root, vector<int>& data)
    {
        if(root)
        {
            inOrder(root->left, data);
            data.push_back(root->val);
            inOrder(root->right, data);
        }
    }
};