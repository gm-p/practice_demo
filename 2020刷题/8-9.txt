56. 合并区间
给出一个区间的集合，请合并所有重叠的区间。
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> res;
        if(intervals.empty())
            return res;
        sort(intervals.begin(), intervals.end(), [](vector<int>& a, vector<int>& b){
            return a[0] < b[0];
        });
        res.push_back(intervals[0]);
        int n = intervals.size();
        for(int i=1; i<n; i++)
        {
            if(res.back()[1] < intervals[i][0])
                res.push_back(intervals[i]);
            else
                res.back()[1] = max(res.back()[1], intervals[i][1]);
        }
        return res;
    }
};


324. 摆动排序 II
给定一个无序的数组 nums，将它重新排列成 nums[0] < nums[1] > nums[2] < nums[3]... 的顺序。
说明:
你可以假设所有输入都会得到有效的结果。
class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        if(nums.empty())
            return;
        int n = nums.size();
        auto nptr = nums.begin() + (n - 1) / 2;
        nth_element(nums.begin(), nptr, nums.end());
        int mid = *nptr;
        int odd = 1;
        int even = (n & 1) ? n-1 : n-2;
        for(int k=0; k<n; k++)
        {
            if(nums[k] > mid)
            {
                if(k <= odd && (k & 1))
                    continue;
                swap(nums[k], nums[odd]);
                k--;
                odd += 2;
            }
            else if(nums[k] < mid)
            {
                if(k >= even && (k & 1) == 0)
                    continue;
                swap(nums[k], nums[even]);
                k--;
                even -= 2;
            }
        }
    }
};

