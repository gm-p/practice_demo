378.有序矩阵中的第K小的元素
给定一个 n x n 矩阵，其中每行和每列元素均按升序排序，找到矩阵中第k小的元素。
请注意，它是排序后的第k小元素，而不是第k个元素。
class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int n = matrix.size();
        int left = matrix[0][0], right = matrix[n-1][n-1];
        while(left < right)
        {
            int mid = left + (right - left) / 2;
            int cnt = countLessEqual(matrix, mid);
            if(cnt < k)
                left = mid + 1;
            else
                right = mid;
        }
        return left;
    }
    int countLessEqual(vector<vector<int>>& matrix, int target){
        int n = matrix.size();
        int i = n-1, j = 0;
        int cnt = 0;
        while(i >= 0 && j < n)
        {
            if(matrix[i][j] <= target)
            {
                cnt += i + 1;
                j++;
            }
            else
                i--;
        }
        return cnt;
    }
};

73.矩阵置零
给定一个 m x n 的矩阵，如果一个元素为 0，则将其所在行和列的所有元素都设为 0。请使用原地算法
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int m = matrix.size();
        if(m < 1)
            return;
        int n = matrix[0].size();
        bool fr = false, fc = false;
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(matrix[i][j] == 0)
                {
                    matrix[i][0] = matrix[0][j] = 0;
                    if(i == 0)
                        fr = true;
                    if(j == 0)
                        fc = true;
                }
            }
        }
        for(int i=1; i<m; i++)
        {
            for(int j=1; j<n; j++)
            {
                if(matrix[i][0] == 0 || matrix[0][j] == 0)
                    matrix[i][j] = 0;
            }
        }
        if(fr)
        {
            for(int j=1; j<n; j++)
                matrix[0][j] = 0;
        }
        if(fc)
        {
            for(int i=1; i<m; i++)
                matrix[i][0] = 0;
        }
    }
};