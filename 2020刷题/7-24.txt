21. 合并两个有序链表
将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL)
            return l2;
        if(l2 == NULL)
            return l1;
        if(l1->val < l2->val)
        {
            l1->next = mergeTwoLists(l1->next, l2);
            return l1;
        }
        else
        {
            l2->next = mergeTwoLists(l1, l2->next);
            return l2;
        }  
    }
};

23. 合并K个排序链表
合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty())
            return NULL;
        while(lists.size() > 1)
        {
            int len = lists.size();
            for(int i=0; i<len/2; i++)
            {
                lists[i] = mergeTwoLists(lists[i], lists[len-i-1]);
            }
            lists.resize((len+1)/2);
        }
        return lists[0];
    }
    
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2)
    {
        if(list1 == NULL)
            return list2;
        if(list2 == NULL)
            return list1;
        ListNode preHead(0);
        ListNode* p = &preHead;
        while(list1 && list2)
        {
            if(list1->val < list2->val)
            {
                p->next = list1;
                list1 = list1->next;
            }
            else
            {
                p->next = list2;
                list2 = list2->next;
            }
            p = p->next;
        }
        if(list1)
            p->next = list1;
        if(list2)
            p->next = list2;
        return preHead.next;
    }
};

148. 排序链表
在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head->next == NULL)
            return head;
        ListNode* fast = head;
        ListNode* slow = head;
        ListNode* pre = head;
        while(fast && fast->next)
        {
            pre = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        pre->next = NULL;
        return merge(sortList(head), sortList(slow));
    }
    ListNode* merge(ListNode* head1, ListNode* head2)
    {
        if(head1 == NULL)
            return head2;
        if(head2 == NULL)
            return head1;
        ListNode preHead(0);
        ListNode* p = &preHead;
        while(head1 && head2)
        {
            if(head1->val < head2->val)
            {
                p->next = head1;
                head1 = head1->next;
            }
            else
            {
                p->next = head2;
                head2 = head2->next;
            }
            p = p->next;
        }
        if(head1)
            p->next = head1;
        if(head2)
            p->next = head2;
        return preHead.next;
    }
};

138. 复制带随机指针的链表
给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。
要求返回这个链表的深拷贝。 
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;

    Node() {}

    Node(int _val, Node* _next, Node* _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head == NULL)
            return head;
        Node* p = head;
        Node* q = NULL;
        while(p)
        {
            q = new Node(p->val, NULL, NULL);
            q->next = p->next;
            p->next = q;
            p = q->next;
        }
        p = head;
        q = head->next;
        while(p && q)
        {
            if(p->random)
                q->random = p->random->next;
            p = q->next;
            if(p)
                q = p->next;
        }
        p = head;
        q = head->next;
        Node* qHead = q;
        while(p && q)
        {
            p->next = q->next;
            p = p->next;
            if(p)
            {
                q->next = p->next;
                q = q->next;
            }
        }
        return qHead;
    }
};