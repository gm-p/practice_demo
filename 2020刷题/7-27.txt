235. 二叉搜索树的最近公共祖先
给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。


百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”
说明:
所有节点的值都是唯一的。
p、q 为不同节点且均存在于给定的二叉搜索树中。
思路：
二叉搜索树是排序树，位于左子树点的结点都比父结点小，而位于右子树的结点都比父结点大，只需要从树的根结点开始和两个输入的结点进行比较。

如果当前结点的值比两个结点的值都大，那么最低的公共父结点一定在左子树，下一步就是遍历左子树；

如果当前结点的值比两个结点的值都小，那么最低的公共父结点一定在右子树；下一步就是遍历右子树；

如果当前结点的值介于两个结点的值之间，那么它就是两个结点的公共父结点，第一个找到的就是最低的公共父结点。
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL)
            return NULL;
        if(root->val < min(p->val, q->val))
            return lowestCommonAncestor(root->right, p, q);
        else if(root->val > max(p->val, q->val))
            return lowestCommonAncestor(root->left, p, q);
        else
            return root;
    }
};

236. 二叉树的最近公共祖先
给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。
说明:
所有节点的值都是唯一的。
p、q 为不同节点且均存在于给定的二叉树中。
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL || root == p || root == q)
            return root;
        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        if(left && left != p && left != q)
            return left;
        TreeNode* right = lowestCommonAncestor(root->right, p, q);
        if(right && right != p && right != q)
            return right;
        if(left && right)
            return root;
        else
            return left ? left : right;
    }
};

104. 二叉树的最大深度
给定一个二叉树，找出其最大深度。
二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。
说明: 叶子节点是指没有子节点的节点。
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root == NULL)
            return 0;
        int left = 1 + maxDepth(root->left);
        int right = 1 + maxDepth(root->right);
        return left > right ? left : right;
    }
};