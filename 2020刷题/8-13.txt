198. 打家劫舍
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，
如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。


给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额


class Solution {
public:
    /*int rob(vector<int>& nums) {  //动态规划
        int n = nums.size();
        if(n == 0)
            return 0;
        if(n == 1)
            return nums[0];
        vector<int> dp(n, 0);
        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);
        for(int i=2; i<n; i++)
            dp[i] = max(dp[i-1], dp[i-2]+nums[i]);
        return dp[n-1];
    }*/
    int rob(vector<int>& nums) {    //动态规划空间压缩
        int n = nums.size();
        if(n == 0)
            return 0;
        if(n == 1)
            return nums[0];
        int a = nums[0], b = max(nums[0], nums[1]);
        for(int i=2; i<n; i++)
        {
            int c = max(a+nums[i], b);
            a = b;
            b = c;
        }
        return b;
    }
};

213. 打家劫舍 II
你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。
同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。


给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额
解析：
现在房子排成了一个圆圈，则如果抢了第一家，就不能抢最后一家，因为首尾相连了，所以第一家和最后一家只能抢其中的一家，或者都不抢
方法：动态规划
如果我们把第一家和最后一家分别去掉，各算一遍能抢的最大值，
然后比较两个值取其中较大的一个即为所求
class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(n == 0)
            return 0;
        if(n == 1)
            return nums[0];
        if(n == 2)
            return max(nums[0], nums[1]);
        int a = nums[1], b = max(nums[1], nums[2]);
        for(int i=3; i<n; i++)
        {
            int c = max(a+nums[i], b);
            a = b;
            b = c;
        }
        int resLast = b;
        a = nums[0], b = max(nums[0], nums[1]);
        for(int i=2; i<n-1; i++)
        {
            int c = max(a+nums[i], b);
            a = b;
            b = c;
        }
        return max(resLast, b);
    }
};

337. 打家劫舍 III
在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 
除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 
如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。

计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。



各房子构成二叉树（每个房子有且只有一个父结点），不能同时偷两个直接连接的房子
方法：
res[0]表示不包含当前节点值的最大值，res[1]表示包含当前值的最大值
递归写法有点像 34 二叉树中和为某一值的路径（112. Path Sum）
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode* root) {
        vector<int> res = dfs(root);
        return max(res[0], res[1]);
    }
    vector<int> dfs(TreeNode* root)
    {
        if(root == NULL)
            return vector<int>(2, 0);
        vector<int> left = dfs(root->left);
        vector<int> right = dfs(root->right);
        vector<int> res(2, 0);
        res[0] = max(left[0], left[1]) + max(right[0], right[1]);  // 不包含根
        res[1] = left[0] + right[0] + root->val;
        return res;
    }
};

62. 不同路径
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。
机器人试图达到网格的右下角（在下图中标记为“Finish”）。

问总共有多少条不同的路径？


说明：m 和 n 的值均不超过 100。
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int> dp(n, 0);
        for(int j=0; j<n; j++)
            dp[j] = 1;
        for(int i=1; i<m; i++)
        {
            for(int j=1; j<n; j++)
            {
                dp[j] = dp[j-1] + dp[j];
            }
        }
        return dp[n-1];
    }
};

63. 不同路径 II
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。
机器人试图达到网格的右下角（在下图中标记为“Finish”）。

现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？


网格中的障碍物和空位置分别用 1 和 0 来表示。
说明：m 和 n 的值均不超过 100。
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int rows = obstacleGrid.size();
        int cols = obstacleGrid[0].size();
        vector<long> dp(cols, 0);
        for(int j=0; j<cols; j++)
        {
            if(obstacleGrid[0][j] == 1)
                break;
            dp[j] = 1;
        }
        for(int i=1; i<rows; i++)
        {
            if(obstacleGrid[i][0] == 1)
                dp[0] = 0;
            for(int j=1; j<cols; j++)
            {
                if(obstacleGrid[i][j] == 1)
                    dp[j] = 0;
                else
                    dp[j] = dp[j-1] + dp[j]; 
            }
        }
        return dp[cols-1];
    }
};
