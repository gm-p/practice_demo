200. 岛屿数量
给定一个由?'1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。
一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。
class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if(grid.empty() || grid[0].empty())
            return 0;
        int m = grid.size();
        int n = grid[0].size();
        int res = 0;
        vector<vector<bool>> visit(m, vector<bool>(n, false));
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(grid[i][j] == '1' && !visit[i][j])
                {
                    res++;
                    dfs(grid, i, j, visit);
                }
            }
        }
        return res;
    }
    void dfs(vector<vector<char>> & grid, int i, int j, vector<vector<bool>>& visit)
    {
        int m = grid.size();
        int n = grid[0].size();
        if(i < 0 || i >= m || j < 0 || j >= n || visit[i][j] || grid[i][j] != '1')
            return;
        visit[i][j] = true;
        dfs(grid, i, j-1, visit);
        dfs(grid, i, j+1, visit);
        dfs(grid, i-1, j, visit);
        dfs(grid, i+1, j, visit);
    }
};

78. 子集
给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。
说明：解集不能包含重复的子集。
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        if(nums.empty())
            return vector<vector<int>>();
        vector<vector<int>> res;
        vector<int> path;
        subset(res, path, 0, nums);
        return res;
    }
    void subset(vector<vector<int>>& res, vector<int>& path, int step, vector<int>& nums)
    {
        if(step == nums.size())
        {
            res.push_back(path);
            return ;
        }
        subset(res, path, step+1, nums);
        path.push_back(nums[step]);
        subset(res, path, step+1, nums);
        path.pop_back();
    }
};

90. 子集 II
给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。
说明：解集不能包含重复的子集。
class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        if(nums.empty())
            return vector<vector<int>>();
        vector<vector<int>> res;
        vector<int> path;
        sort(nums.begin(), nums.end());
        dfs(nums, 0, path, res);
        return res;
    }
    void dfs(vector<int>& nums, int start, vector<int>& path, vector<vector<int>>& res)
    {
        res.push_back(path);
        for(int i=start; i<nums.size(); i++)
        {
            if(i != start && nums[i] == nums[i-1])
                continue;
            path.push_back(nums[i]);
            dfs(nums, i+1, path, res);
            path.pop_back();
        }
    }
};