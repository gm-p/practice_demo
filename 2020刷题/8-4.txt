最小的K个数
输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,
方法一：基于partition函数(快排
class Solution {
public:
    vector<int> GetLeastNumbers_Solution(vector<int> input, int k) {
        if(k < 0 || input.empty() || k > input.size())
            return vector<int>{};
        int left = 0, right = input.size() - 1;
        while(left < right)
        {
            int pivot = partition(input, left, right);
            if(pivot < k - 1)
                left = pivot + 1;
            else if(pivot > k - 1)
                right = pivot - 1;
            else
                break;
        }
        vector<int> res(input.begin(), input.begin()+k);
        return res;
    }
    int partition(vector<int>& input, int left, int right)
    {
        int pivot = input[left];
        while(left < right)
        {
            while(left < right && input[right] >= pivot)
                right--;
            input[left] = input[right];
            while(left < right && input[left] <= pivot)
                left++;
            input[right] = input[left];
        }
        input[left] = pivot;
        return left;
    }
};

方法二：使用堆或者红黑树
class Solution {
public:
    vector<int> GetLeastNumbers_Solution(vector<int> input, int k) {
        if(k < 0 || input.empty() || k > input.size())
            return vector<int>{};
        multiset<int, greater<int>> ms; //仿函数中的greater<T>模板，从大到小排序(默认从小到大，左结点<父结点<根结点
        for(int a: input)
        {
            if(ms.size() < k)
                ms.insert(a);
            else
            {
                multiset<int, greater<int>>::iterator it = ms.begin();
                if(*it > a)
                {
                    ms.erase(*it);
                    ms.insert(a);
                }
            }
        }
        vector<int> res(ms.begin(), ms.end());
        return res;
    }
};

215. 数组中的第K个最大元素
在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int left = 0, right = nums.size() - 1;
        k = nums.size() - k;
        while(left < right)
        {
            int pivot = partition(nums, left, right);
            if(pivot < k)
                left = pivot + 1;
            else if(pivot > k )
                right = pivot - 1;
            else
                break;
        }
        return nums[k];
    }
    int partition(vector<int>& nums, int left, int right)
    {
        int pivot = nums[left];
        while(left < right)
        {
            while(left < right && nums[right] >= pivot)
                right--;
            nums[left] = nums[right];
            while(left < right && nums[left] <= pivot)
                left++;
            nums[right] = nums[left];
        }
        nums[left] = pivot;
        return left;
    }
};
方法二：维护一个大小为k的小顶堆，扫描输入数据，不断更新小顶堆的内容最后堆顶元素即可n个数中第k大的数
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int, vector<int>, greater<int>> minHeap;//构建小顶堆
        for(int i=0; i<nums.size(); i++)
        {
            if(i < k)
                minHeap.push(nums[i]);
            else
            {
                if(minHeap.top() < nums[i])
                {
                    minHeap.pop();
                    minHeap.push(nums[i]);
                }
            }
        }
        return minHeap.top();
    }
};
方法三：
用stl中make_heap函数，构建大顶堆，然后逐次输出堆顶元素(原理与用priority_queue相同，不过没有额外空间)
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        make_heap(nums.begin(), nums.end());//构建大顶堆，用nums存储，与下面区别就是节省了空间
        for(int i=0; i<k-1; i++)
        {
            pop_heap(nums.begin(), nums.end());//将堆顶元素移至末尾，重新调整使（begin~end-1）的元素满足堆规律
            nums.pop_back();//移除末尾元素
        }
        return nums[0];
    }
};


41 数据流中的中位数


如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。
我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数
大顶堆 +?小顶堆

用两个堆(stl中的priority_queue)
过程：用于一个大顶堆实现左边容器，小顶堆实现右边容器，根据左边最大数与右边最小数得到中位数
??? 
(1) 平均分配
??? 
(2) 还要保证大顶堆中所有数据小于小顶堆中元素，比较新数据与大顶堆和小顶堆堆顶元素就知道该放到哪里
class Solution {
public:
    priority_queue<int> maxHeap;
    priority_queue<int, vector<int>, greater<int>> minHeap;
    void Insert(int num)
    {
        if(maxHeap.empty() || num < maxHeap.top())
            maxHeap.push(num);
        else
            minHeap.push(num);
        if(maxHeap.size() < minHeap.size())
        {
            maxHeap.push(minHeap.top());
            minHeap.pop();
        }
        if(maxHeap.size() > minHeap.size() + 1)
        {
            minHeap.push(maxHeap.top());
            maxHeap.pop();
        }
    }

    double GetMedian()
    { 
        return maxHeap.size() > minHeap.size() ? maxHeap.top() : (maxHeap.top() + minHeap.top())/2.0;
    }

};