312. 戳气球
有 n 个气球，编号为0 到 n-1，每个气球上都标有一个数字，这些数字存在数组?nums?中。


现在要求你戳破所有的气球。每当你戳破一个气球 i 时，你可以获得?nums[left] * nums[i] * nums[right]?个硬币。?
这里的?left?和?right?代表和?i?相邻的两个气球的序号。注意当你戳破了气球 i 后，气球?left?和气球?right?就变成了相邻的气球。

求所能获得硬币的最大数量。
说明:

你可以假设?nums[-1] = nums[n] = 1，但注意它们不是真实存在的所以并不能被戳破。

	0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100


方法：动态规划

dp[i][j]表示打爆区间[i,j]中的所有气球能得到的最多金币

dp[i][j] = max(dp[i][j], nums[i - 1]*nums[k]*nums[j + 1] + dp[i][k - 1] + dp[k + 1][j])， i ≤ k ≤ j
?
遍历区间，遍历气球,在区间[i,j]中k气球最后打爆的情况，使最后能得到最多金币
我们其实只是更新了dp数组的右上三角区域，我们最终要返回的值存在dp[1][n]中，其中n是两端添加1之前数组nums的个数
class Solution {
public:
    int maxCoins(vector<int>& nums) {
        if(nums.empty())
            return 0;
        int n = nums.size();
        nums.insert(nums.begin(), 1);
        nums.push_back(1);
        vector<vector<int>> dp(n+2, vector<int>(n+2, 0));
        for(int len=1; len<=n; len++)//区间长度（先算小区间，再算大区间，从小问题算到大问题）
        {
            for(int left=1; left<=n-len+1; left++)
            {
                int right = left + len - 1;
                for(int k=left; k<= right; k++)
                {
                    dp[left][right] = max(dp[left][right],
                                         nums[left-1]*nums[k]*nums[right+1] + dp[left][k-1] + dp[k+1][right]);
                }
            }
        }
        return dp[1][n];
    }
};

139. 单词拆分
给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。
说明：
拆分时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。
方法：动态规划
f[i]表示s[0,i-1]是否可以被分词,表示在第i个字符后面的隔板
状态转移方程：f(i) = any_of(f(j)&&s[j,i-1] ∈ dict); j = 0~i-1

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> setDict(wordDict.begin(), wordDict.end());
        int n = s.size();
        vector<bool> dp(n+1, 0);//长度为n的字符串有n+1个隔板，多分配一个空间以方便后续递推
        dp[0] = true;
        for(int i=1; i<=n; i++)//以s[i-1]字符结尾的子串, i=1~n
        {
            for(int j=0; j<i; j++)//以s[j]开头的子串，j=0~i-1
            {
                if(dp[j] && setDict.find(s.substr(j, i-j)) != setDict.end())
                    dp[i] = true;
            }
        }
        return dp[n];
    }
};

140. 单词拆分 II
给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。


说明：
分隔时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词
方法：dfs
联系排列组合问题
这里用一个hash表避免对相同子串s进行重复分隔，减少重复计算
class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        unordered_map<string, vector<string>> m;
        return dfs(s, wordDict, m);
    }
    
    vector<string> dfs(string s, vector<string>& wordDict, unordered_map<string, vector<string>>& m)
    {
        if(m.find(s) != m.end()) //如果对s的分隔已经递归过了，就直接退出
            return m[s];
        if(s.empty()) //map型数据类型用{}，递归的出口
            return {""};
        vector<string> res; //某一次的分隔结果
        for(string word: wordDict)
        {
            if(word == s.substr(0, word.size())) //如果当前单词在s开头
            {
                vector<string> remain = dfs(s.substr(word.size()), wordDict, m);//对该单词后面的子串递归（分支的深度）,返回后面子串的分隔结果
                for(string s: remain)
                    res.push_back(word + (s.empty() ?  "" : " ") + s);//拼接后面子串的分隔结果与当前单词
            }
        }
        return m[s] = res;   //返回对s的分隔结果
    }
};
