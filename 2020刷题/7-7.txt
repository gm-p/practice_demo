191. 位1的个数
编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int cnt = 0;
        while(n)
        {
            cnt++;
            n = n & (n-1);
        }
        return cnt;
    }
};

136. 只出现一次的数字
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int res = nums[0];
        int n = nums.size();
        for(int i=1; i<n; i++)
            res ^= nums[i];
        return res;
    }
};

137. 只出现一次的数字 II
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int n = nums.size();
        int bitSum[32] = {0};
        for(int i=0; i<n; i++)
        {
            int bitMask = 1;
            for(int j=0; j<31; j++)
            {
                if(nums[i] & bitMask)
                    bitSum[j] += 1;
                bitMask <<= 1;
            }
            if(nums[i] & bitMask)
                bitSum[31] += 1;
        }
        int res = 0;
        for(int j=31; j>=0; j--)
        {
            res <<= 1;
            res += bitSum[j] % 3;
        }
        return res;
    }
};

260. 只出现一次的数字 III
给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。
class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        int n = nums.size();
        vector<int> res;
        int xorValue = 0;
        for(int i=0; i<n; i++)
            xorValue ^= nums[i];
        int k = firstOne(xorValue);
        int a = 0;
        for(int i=0; i<n; i++)
        {
            if(k & nums[i])
                a ^= nums[i];
        }
        res.push_back(a);
        res.push_back(a ^ xorValue);
        return res;
    }
    int firstOne(int val)
    {
        int res = 1;
        while((val & res) == 0)
            res <<= 1;
        return res;
    }
};

网络
int bit_mask = ~(xor_value-1) & xor_value; //仅保留最后一个为1的比特位，构成mask,