n个骰子的点数
把n个骰子仍在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。
动态规划思想:

假设f(m,s)表示投第m个骰子时，点数之和s出现的次数,投第m个骰子时的点数之和只与投第m-1个骰子时有关。

递归方程：f(m,s)=f(m-1,s-1)+f(m-1,s-2)+f(m-1,s-3)+f(m-1,s-4)+f(m-1,s-5)+f(m-1,s-6)，
表示本轮点数和为s出现次数等于上一轮点数和为s-1，s-2，s-3，s-4，s-5，s-6出现的次数之和。

初始条件：第一轮的f(1),f(2),f(3),f(4),f(5),f(6)均等于1.
void printProbabilities(int number)
{
     if(number < 1)
	return ;
     vector<vector<int>> probabilites(2, vector<int>(6 * number + 1, 0));
     int flag = 0;
     for(int i=1; i<=6; i++)
        probabilities[0][i] = 1;
     for(int k=2; k<=number; k++)
     {
          for(int i=0; i<k; i++)
               probabilities[1-flag][i] = 0;
          for(int i=k; i<=6*k; i++)
          {
               probabilities[1-flag][i] = 0;
               for(int j=1; j<=6 && j<=i; j++)
                   probabilities[1-flag][i] += probabilities[flag][i-j];
          }
          flag = 1 - flag;
     }
     double total = pow(6, number);
     for(int i=number; i<=6*number; i++)
         cout<<probabilities[flag][i] * 1.0 / total<<endl;
}
 
圆圈中最后剩下的数字（约瑟夫环问题）
每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。
其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。
每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,
继续0...m-1报数....这样下去....直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。
请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)
现在先将n个人按照编号进行排序：?
0 1 2 3 … n-1?
那么第一次被淘汰的人编号一定是K-1(假设K < n，若K > n则为(K-1) mod n)。
将被选中的人标记为”#”：?
0 1 2 3 … K-2 # K K+1 K+2 … n-1?

第二轮报数时，起点为K这个候选人。并且只剩下n-1个选手。
假如此时把k看作0’，k+1看作1’…?
则对应有：
0 1 2 3 ... K-2 # K K+1 K+2 ... n-1
n-K' n-2' 0' 1' 2' ... n-K-1'
?


此时在0’,1’,…,n-2’上再进行一次K报数的选择。假设f[n-1]的值已经求得，因此我们可以直接求得当选者的编号s’。?

但是，该编号s’是在n-1个候选人报数时的编号，并不等于n个人时的编号 ，所以我们还需要将s’转换为对应的s。?

通过观察，s和s’编号相对偏移了K，又因为是在环中，因此得到s = (s'+K) mod n。?

即f[n] = (f[n-1] + k) mod n。
class Solution
{
public:
??? 
int LastRemaining_Solution(int n, int k)
??? 
{
???????
    if(n < 1 || k < 1)
        return -1;
    int last = 0;
    for(int i=2; i<=n; i++)
        last = (last + k) % i;
    return last;
}