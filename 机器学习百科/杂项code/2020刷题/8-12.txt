152. 乘积最大子序列
给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。
方法：动态规划
两个dp数组，其中f[i]和g[i]分别表示包含nums[i](以nums[i]结尾)时的最大和最小子数组乘积，
初始化时f[0]和g[0]都初始化为nums[0]，其余都初始化为0。
?

从数组的第二个数字开始遍历，此时的最大值和最小值只会在这三个数字之间产生，
即f[i-1]*nums[i]，g[i-1]*nums[i]，和nums[i]。
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int last_max = nums[0], last_min = nums[0];
        int res = nums[0];
        int n = nums.size();
        for(int i=1; i<n; i++)
        {
            int cur_max = max(max(last_max * nums[i], last_min * nums[i]), nums[i]);
            int cur_min = min(min(last_max * nums[i], last_min * nums[i]), nums[i]);
            last_max = cur_max;
            last_min = cur_min;
            res = max(res, last_max);
        }
        return res;
    }
};

礼物的最大价值
在一个m*n的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格，直到到达棋盘的右下角。
给定一个棋盘及其上面的礼物，请计算你最多能拿多少价值的礼物？
解答：
1. 利用循环的动态规划实现，使用辅助二维数组
定义f(i,j)表示到达坐标为(i,j)的格子时能拿到的礼物总和的最大值；
有两种路径到达(i,j)：（i-1,j）或者（i,j-1）；
f(i,j) = max(f(i-1,j), f(i,j-1)) + gift[i,j]；
class Solution
{
public:
	int getMaxValue(const int* values, int rows, int cols)
	{
		vector<vector<int>> dp(rows, vector<int>(cols, 0));
		dp[0][0] = values[0];
		for(int i=1; i<rows; i++)
			dp[i][0] = dp[i-1][0] + values[i*cols];
		for(int j=1; j<cols; j++)
			dp[0][j] = dp[0][j-1] + values[j*cols];
		for(int i=1; i<rows; i++)
		{
			for(int j=1; j<cols; j++)
			{
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + values[i*cols+j];
			}
		}
		return dp[rows-1][cols-1];
	}
};

空间压缩
class Solution
{
public:
	int getMaxValue(const int* values, int rows, int cols)
	{
		vector<int> dp(cols, 0);
		dp[0] = values[0];
		for(int j=1; j<cols; j++)
			dp[j] = dp[j-1] + values[j*cols];
		for(int i=1; i<rows; i++)
		{
			dp[0] += values[i*cols];
			for(int j=1; j<cols; j++)
			{
				//if(j == 0)
					//dp[j] += values[i*cols];
				//else
				//{
				dp[j] = max(dp[j], dp[j-1]) + values[i*cols+j];	
				//}
			}
		}
		return dp[cols-1];
	}
};
