13. 罗马数字转整数
罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。
字符          数值

I             1

V             5

X             10

L             50

C             100

D             500

M             1000


例如， 罗马数字 2 写做?II?，即为两个并列的 1。12 写做?XII?，即为?X?+?II?。 
27 写做??XXVII, 即为?XX?+?V?+?II?。

通常情况下，罗马数字中小的数字在大的数字的右边。
但也存在特例，例如 4 不写做?IIII，而是?IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。
同样地，数字 9 表示为?IX。这个特殊的规则只适用于以下六种情况：

I?可以放在?V?(5) 和?X?(10) 的左边，来表示 4 和 9。

X?可以放在?L?(50) 和?C?(100) 的左边，来表示 40 和?90。?
C?可以放在?D?(500) 和?M?(1000) 的左边，来表示?400 和?900。

给定一个罗马数字，将其转换成整数。输入确保在 1?到 3999 的范围内。


class Solution {
public:
    int romanToInt(string s) {
         unordered_map<char, int> m{{'I', 1},
                                   {'V', 5},
                                   {'X', 10},
                                   {'L', 50},
                                   {'C', 100},
                                   {'D', 500},
                                   {'M', 1000}};
        int n = s.size();
        int res = m[s[n-1]];
        for(int i=n-2; i>=0; i--)//从后往前扫描
        {
            if(m[s[i+1]] > m[s[i]])//当前字符比后面字符对应数值小时，用减法
                res -= m[s[i]];
            else
                res += m[s[i]];
        }
        return res;
    }
};

384. 打乱数组
打乱一个没有重复元素的数组。
class Solution {
public:
    vector<int> original;
    vector<int> array;
    Solution(vector<int>& nums) {
        original = nums;
        array.assign(nums.begin(), nums.end());
        srand(time(nullptr));
    }
    
    /** Resets the array to its original configuration and return it. */
    vector<int> reset() {
        return original;
    }
    
    /** Returns a random shuffling of the array. */
    vector<int> shuffle() {
        for(int i=0; i<array.size(); i++)
        {
            int j = rand() % (i+1);
            swap(array[i], array[j]);
        }
        return array;
    }
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution* obj = new Solution(nums);
 * vector<int> param_1 = obj->reset();
 * vector<int> param_2 = obj->shuffle();
 */