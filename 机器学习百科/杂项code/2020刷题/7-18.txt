正则表达式匹配
请实现一个函数用来匹配包括'.'和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。
例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但是与"aa.a"和"ab*a"均不匹配
class Solution {
public:
    bool match(char* str, char* pattern)
    {
        if(*str == '\0' && *pattern == '\0')
            return true;
        if(*str != '\0' && *pattern == '\0')
            return false;
        if(*(pattern+1) != '*')
        {
            if(*str == *pattern || (*str != '\0' && *pattern == '.'))
                return match(str+1, pattern+1);
            else
                return false;
        }
        else
        {
            if(*str == *pattern || (*str != '\0' && *pattern == '.'))
                return match(str+1, pattern) || match(str, pattern+2);
            else
                return match(str, pattern+2);
        }
    }
};

10. 正则表达式匹配
给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。
'.' 匹配任意单个字符
'*' 匹配零个或多个前面的那一个元素
所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。
说明:
s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
class Solution {
public:
    bool isMatch(string s, string p) {
        if(s.empty() && p.empty())
            return true;
        if(!s.empty() && p.empty())
            return false;
        int slen = s.size(), plen = p.size();
        if(plen == 1)
            return (slen == 1) && (p[0] == s[0] || p[0] == '.');
        int i = 0, j = 0;
        if(j + 1 < plen && p[j+1] != '*')
        {
            if(s[i] == p[j] || (i < slen && p[j] == '.'))
                return isMatch(s.substr(i+1), p.substr(j+1));
            else
                return false;
        }
        else
        {
            if(s[i] == p[j] || (i < slen && p[j] == '.'))
                return isMatch(s.substr(i), p.substr(j+2)) || isMatch(s.substr(i+1), p.substr(j));
            else
                return isMatch(s.substr(i), p.substr(j+2));
        }
    }
}; 

表示数值的字符串
请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。
例如，字符串"+100","5e2","-123","3.1416"和"-1E-16"都表示数值。
 但是"12e","1a3.14","1.2.3","+-5"和"12e+4.3"都不是。
class Solution {
public:
    bool isNumeric(char* string)
    {
        int n = strlen(string);
        bool sign = false, decimal = false, hasE = false;
        for(int i=0; i<n; i++)
        {
            if(string[i] == 'e' || string[i] == 'E')
            {
                if(hasE || i == n-1)
                    return false;
                hasE = true;
            }
            else if(string[i] == '.')
            {
                if(decimal || hasE)
                    return false;
                decimal = true;
            }
            else if(string[i] == '+' || string[i] == '-')
            {
                if(sign && string[i-1] != 'e' && string[i-1] != 'E')
                    return false;
                if(!sign && i > 0 && string[i-1] != 'e' && string[i-1] != 'E')
                    return false;
                sign = true;
            }
            else if(!isdigit(string[i]))
                return false;
        }
        return true;
    }

};
