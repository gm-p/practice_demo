45 把数组排成最小的数
输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。
class Solution {
public:
    string PrintMinNumber(vector<int> numbers) {
        sort(numbers.begin(), numbers.end(), [](int a, int b){
            return to_string(a) + to_string(b) < to_string(b) + to_string(a);
        });
        string res = "";
        for(int i=0; i<numbers.size(); i++)
            res += to_string(numbers[i]);
        return res;
    }
};

class Solution
{

public:
??? 
static bool cmp(int a, int b) //必须定义成static类型才能被sort使用
??? 
{
??????? 
	string A = to_string(a) + to_string(b);
??????? 
	string B = to_string(b) + to_string(a);
??????? 
	return A < B;//利用字符串的比较方法
??? 
}
??? 
string PrintMinNumber(vector<int> numbers)
??? {
??????? 
	sort(numbers.begin(), numbers.end(), cmp);//用自定义的排序方法从小到大进行排序

????string answer;
??????? 
	for(int ai:numbers) answer += to_string(ai);

 ??? return answer;
??? 
}
};


51 数组中的逆序对


有一组数，对于其中任意两个数组，若前面一个大于后面一个数字，则这两个数字组成一个逆序对。请设计一个高效的算法，计算给定数组中的逆序对个数。

给定一个int数组A和它的大小n，请返回A中的逆序对个数。保证n小于等于5000。
思路：
（1）暴力法：遍历数组，比较某元素与所有后面元素是否构成逆序对，O（n^2）

（2）归并排序法：将数组递归分解为两个个子数组，在子数组内部排序，统计有序子数组之间的逆序对情况（由于分割的子数组有左右关系，故可行），并归并有序子数组....O（nlogn）,O(n)，（空间换时间）


class AntiOrder {
public:
    int res = 0;
    int count(vector<int> A, int n) {
        // write code here
        if(n < 2)
            return 0;
        mergeSort(A, 0, n-1);
        return res;
    }
    void mergeSort(vector<int>& A, int begin, int end){
        if(begin >= end)
            return;
        int mid = (begin + end) / 2;
        mergeSort(A, begin, mid);
        mergeSort(A, mid+1, end);
        merge(A, begin, mid, end);
    }
    void merge(vector<int>& A, int begin, int mid, int end){
        vector<int> tmp(end - begin + 1);
        int i=begin, j=mid+1, k=0;
        while(i <= mid && j <=end)
        {
            if(A[i] > A[j])
            {
                tmp[k++] = A[i++];
                res += end - j + 1;
            }
            else
            {
                tmp[k++] = A[j++];
            }
        }
        while(i <= mid)
            tmp[k++] = A[i++];
        while(j <= end)
            tmp[k++] = A[j++];
        for(i=begin,k=0; i<=end; i++, k++)
            A[i] = tmp[k];
    }
};