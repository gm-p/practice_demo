74.搜索二维矩阵
编写一个高效的算法来判断?m x n?矩阵中，是否存在一个目标值。该矩阵具有如下特性：

每行中的整数从左到右按升序排列。
每行的第一个整数大于前一行的最后一个整数。
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        if(m < 1)
            return false;
        int n = matrix[0].size();
        int left = 0, right = m*n - 1;
        while(left <= right)
        {
            int mid = (left + right)/2;
            int row = mid / n;
            int col = mid % n;
            if(matrix[row][col] == target)
                return true;
            else if (matrix[row][col] < target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        return false;
    }
};

240. 搜索二维矩阵 II
编写一个高效的算法来搜索?m?x?n?矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：

每行的元素从左到右升序排列。
每列的元素从上到下升序排列。


现有矩阵 matrix 如下：
[
  [1,   4,  7, 11, 15],
 
   [2,   5,  8, 12, 19],
 
   [3,   6,  9, 16, 22],
  
   [10, 13, 14, 17, 24],
  
   [18, 21, 23, 26, 30]
]


给定 target = 5，返回 true。
给定 target = 20，返回 false。

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        if(m < 1)
            return false;
        int n = matrix[0].size();
        int i = 0, j = n-1;
        while(i < m && j >= 0)
        {
            if(matrix[i][j] == target)
                return true;
            else if(matrix[i][j] < target)
                i++;
            else 
                j--;
        }
        return false;
    }
};

54. 螺旋矩阵
给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。
输入:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
输出: [1,2,3,6,9,8,7,4,5]
输入:
[
  [1, 2, 3, 4],
  
        [5, 6, 7, 8],

        [9,10,11,12]
]

输出: [1,2,3,4,8,12,11,10,9,5,6,7]


class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int m = matrix.size();
        if(m < 1)
            return vector<int>{};
        int n = matrix[0].size();
        vector<int> res;
        int left=0, top=0, right=n-1, bottom=m-1;
        while(left <= right && top <= bottom)
        {
            int i = top, j = left;
            while(j <= right)
            {
                res.push_back(matrix[i][j]);
                j++;
            }  
            i = top + 1;
            j = right;
            while(i <= bottom)
            {
                res.push_back(matrix[i][j]);
                i++;
            }
            i = bottom;
            j = right - 1;
            while(j >= left && i != top)
            {
                res.push_back(matrix[i][j]);
                j--;
            }
            i = bottom - 1;
            j = left;
            while(i > top && j != right)
            {
                res.push_back(matrix[i][j]);
                i--;
            }
            left++;
            top++;
            right--;
            bottom--;
        }
        return res;
    }
};

59. 螺旋矩阵 II
给定一个正整数 n，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。
输入: 3
输出:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> res(n, vector<int>(n));
        int left = 0, top = 0;
        int right = n-1, bottom = n-1;
        int k = 1;
        while(left <= right && top <= bottom)
        {
            int i = top, j = left;
            while(j <= right)
            {
                res[i][j] = k;
                k++;
                j++;
            }
            i = top + 1;
            j = right;
            while(i <= bottom)
            {
                res[i][j] = k;
                k++;
                i++;
            }
            if(left < right)
            {
                i = bottom;
                j = right - 1;
                while(j >= left)
                {
                    res[i][j] = k;
                    k++;
                    j--;
                }
            }
            if(top < bottom)
            {
                i = bottom - 1;
                j = left;
                while(i > top)
                {
                    res[i][j] = k;
                    k++;
                    i--;
                }
            }
            left++;
            top++;
            right--;
            bottom--;
        }
        return res;
    }
};