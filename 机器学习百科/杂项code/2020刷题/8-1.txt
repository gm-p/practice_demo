二叉搜索树与双向链表
输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向
/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
    TreeNode* Convert(TreeNode* pRootOfTree)
    {
        if(pRootOfTree == NULL)
            return pRootOfTree;
        stack<TreeNode*> s;
        TreeNode* p = pRootOfTree;
        TreeNode* pre = NULL;
        TreeNode* head = NULL;
        while(!s.empty() || p)
        {
            if(p)
            {
                s.push(p);
                p = p->left;
            }
            else
            {
                p = s.top();
                s.pop();
                if(head == NULL)
                    head = p;
                p->left = pre;
                if(pre)
                    pre->right = p;
                pre = p;
                p = p->right;
            }
        }
        return head;
    }
};

二叉搜索树的后序遍历序列
输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。
class Solution {
public:
    bool VerifySquenceOfBST(vector<int> sequence) {
        if(sequence.empty())
            return false;
        return verify(sequence, 0, sequence.size()-1);
    }
    bool verify(vector<int>& sequence, int begin, int end)
    {
        if(begin >= end)
            return true;
        int right = end;
        for(int i=begin; i<end; i++)
        {
            if(sequence[i] > sequence[end])
            {
                right = i;
                break;
            }
        }
        for(int i=right; i<end; i++)
        {
            if(sequence[i] < sequence[end])
                return false;
        }
        return verify(sequence, begin, right-1) && verify(sequence, right, end-1);
    }
};