189.旋转数组
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        k = k % n;
        if(k)
        {
           /*reverse(nums, 0, n-k-1);
           reverse(nums, n-k, n-1);
           reverse(nums, 0, n-1);*/
            reverse(nums, 0, n-1);
            reverse(nums, 0, k-1);
            reverse(nums, k, n-1);
        }
    }
    
    void reverse(vector<int>& nums, int left, int right)
    {
        while(left < right)
        {
            swap(nums[left], nums[right]);
            left++;
            right--;
        }
    }
};

349.两个数组的交集
给定两个数组，编写一个函数来计算它们的交集
输出结果中的每个元素一定是唯一的。
我们可以不考虑输出结果的顺序。
class Solution {
public:
    /*vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {方法一
        int n1 = nums1.size(), n2 = nums2.size();
        if(n1 == 0 || n2 == 0)
            return {};
        unordered_set<int> s(nums1.begin(), nums1.end());
        vector<int> res;
        for(int i=0; i<n2; i++)
        {
            if(s.find(nums2[i]) != s.end())
            {
                res.push_back(nums2[i]);
                s.erase(nums2[i]);
            }
        }
        return res;
    }*/
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {方法二
        int n1 = nums1.size(), n2 = nums2.size();
        if(n1 == 0 || n2 == 0)
            return {};
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        vector<int> res;
        int i=0, j=0;
        while(i < n1 && j <n2)
        {
            if(nums1[i] < nums2[j])
                i++;
            else if(nums1[i] > nums2[j])
                j++;
            else
            {
                if(res.empty() || res.back() != nums1[i])
                    res.push_back(nums1[i]);
                i++;
                j++;
            }
        }
        return res;
    }
};

350.两个数组的交集II
给定两个数组，编写一个函数来计算它们的交集。
输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。
我们可以不考虑输出结果的顺序。
class Solution {
public:
    /*vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {  // 方法一
        int n1 = nums1.size(), n2 = nums2.size();
        if(n1 == 0 || n2 == 0)
            return {};
        vector<int> res;
        unordered_map<int, int> count;
        for(int num : nums1)
            count[num]++;     // 首次调用[]以0初始化计数
        for(int num : nums2)
        {
            if(count[num])
            {
                res.push_back(num);
                count[num]--;
            }
        }
        return res;
    }*/
    
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {  // 方法二
        int n1 = nums1.size(), n2 = nums2.size();
        if(n1 == 0 || n2 == 0)
            return {};
        vector<int> res;
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        int i = 0, j = 0;
        while(i < n1 && j < n2)
        {
            if(nums1[i] < nums2[j])
                i++;
            else if(nums1[i] > nums2[j])
                j++;
            else
            {
                res.push_back(nums1[i]);
                i++;
                j++;
            }
        }
        return res;
    }
};