162. 寻找峰值
峰值元素是指其值大于左右相邻值的元素。

给定一个输入数组?nums，其中 nums[i] ≠ nums[i+1]，找到峰值元素并返回其索引。


数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。

你可以假设?nums[-1] = nums[n] = -∞

方法：借助二分查找思路
right指的数比后一个数大，left指的数比前一个数大，当两个“指针”相遇时，就可以满足极大值条件（两个指针按二分跨度走，故效率较高）
有点像lower_bound函数
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        if(nums.empty())
            return -1;
        int left = 0, right = nums.size() - 1;
        while(left < right)
        {
            int mid = (left + right) / 2;
            if(nums[mid] < nums[mid+1])
                left = mid + 1;
            else
                right = mid;
        }
        return left;
    }
};

278. 第一个错误的版本
你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。
由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的


假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本
你可以通过调用?bool isBadVersion(version)?接口来判断版本号 version 是否在单元测试中出错。
实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。


// Forward declaration of isBadVersion API.
bool isBadVersion(int version);

class Solution {
public:
    int firstBadVersion(int n) {
        int left = 1, right = n;
        while(left < right)
        {
            int mid = left + (right - left) / 2;
            if(isBadVersion(mid))
                right = mid;
            else
                left = mid + 1;
        }
        return left;
    }
};